import type { IDestroyOptions } from '@pixi/display';
import type { IRenderer } from '@pixi/core';
import type { ITextStyle } from '@pixi/text';
import { Rectangle } from '@pixi/core';
import type { Renderer } from '@pixi/core';
import { Sprite } from '@pixi/sprite';
import { TextStyle } from '@pixi/text';

/**
 * Text display object that support multi-style HTML text.
 * @class
 * @extends PIXI.Sprite
 * @see {@link https://pixijs.download/dev/docs/PIXI.Sprite.html PIXI.Sprite}
 * @see {@link https://pixijs.download/dev/docs/PIXI.TextStyle.html PIXI.TextStyle}
 */
export declare class HTMLText extends Sprite {
    private _domElement;
    private _svgRoot;
    private _foreignObject;
    private _image;
    private canvas;
    private context;
    private _resolution;
    private _text;
    private _style;
    private _autoResolution;
    private _loading;
    private localStyleID;
    private dirty;
    /**
     * @param {string} [text] - Text contents
     * @param {PIXI.TextStyle} [style] - Style settings, not all TextStyle options are supported.
     * @param {HTMLCanvasElement} [canvas] - Optional canvas to use for rendering.
     *.       if undefined, will generate it's own canvas using createElement.
     */
    constructor(text?: string, style?: TextStyle | Partial<ITextStyle>, canvas?: HTMLCanvasElement);
    /**
     * Manually refresh the text.
     * @public
     * @param {boolean} respectDirty - Whether to abort updating the
     *        text if the Text isn't dirty and the function is called.
     */
    updateText(respectDirty?: boolean): void;
    /**
     * Update the texture resource.
     * @private
     */
    updateTexture(): void;
    /**
     * Renders the object using the WebGL renderer
     *
     * @param {PIXI.Renderer} renderer - The renderer
     * @private
     */
    _render(renderer: Renderer): void;
    /**
     * Renders the object using the Canvas Renderer.
     *
     * @private
     * @param {PIXI.CanvasRenderer} renderer - The renderer
     */
    _renderCanvas(renderer: IRenderer): void;
    /**
     * Get the local bounds.
     *
     * @param {PIXI.Rectangle} rect - Input rectangle.
     * @return {PIXI.Rectangle} Local bounds
     */
    getLocalBounds(rect: Rectangle): Rectangle;
    _calculateBounds(): void;
    /**
     * Handle dirty style changes
     * @private
     */
    _onStyleChange(): void;
    /**
     * Destroy this Text object. Don't use after calling.
     * @param {boolean|object} options - Same as Sprite destroy options.
     */
    destroy(options?: boolean | IDestroyOptions | undefined): void;
    /**
     * Get the width in pixels.
     * @member {number}
     */
    get width(): number;
    set width(value: number);
    /**
     * Get the height in pixels.
     * @member {number}
     */
    get height(): number;
    set height(value: number);
    /**
     * The base style to render with text.
     * @member {PIXI.TextStyle}
     */
    get style(): TextStyle;
    set style(style: TextStyle | Partial<ITextStyle>);
    /**
     * Contents of text. This can be HTML text and include tags.
     * @example
     * const text = new HTMLText('This is a <em>styled</em> text!');
     * @member {string}
     */
    get text(): string | null;
    set text(text: string | null);
    /**
     * The resolution / device pixel ratio of the canvas.
     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.
     * @member {number}
     * @default 1
     */
    get resolution(): number;
    set resolution(value: number);
    sanitiseText(text: string): string;
}

export { }
