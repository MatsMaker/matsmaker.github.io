{"version":3,"file":"html-text.es.mjs","sources":["../src/index.ts"],"sourcesContent":["import { Sprite } from '@pixi/sprite';\nimport { Texture, Rectangle, settings, utils } from '@pixi/core';\nimport { TextStyle } from '@pixi/text';\nimport type { ITextStyle } from '@pixi/text';\nimport type { Renderer, IRenderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * Text display object that support multi-style HTML text.\n * @class\n * @extends PIXI.Sprite\n * @see {@link https://pixijs.download/dev/docs/PIXI.Sprite.html PIXI.Sprite}\n * @see {@link https://pixijs.download/dev/docs/PIXI.TextStyle.html PIXI.TextStyle}\n */\nexport class HTMLText extends Sprite\n{\n    private _domElement: HTMLElement;\n    private _svgRoot: SVGSVGElement;\n    private _foreignObject: SVGForeignObjectElement;\n    private _image: HTMLImageElement;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private _resolution: number;\n    private _text: string | null = null;\n    private _style: TextStyle | null = null;\n    private _autoResolution = true;\n    private _loading = false;\n    private localStyleID = -1;\n    private dirty = false;\n\n    /**\n     * @param {string} [text] - Text contents\n     * @param {PIXI.TextStyle} [style] - Style settings, not all TextStyle options are supported.\n     * @param {HTMLCanvasElement} [canvas] - Optional canvas to use for rendering.\n     *.       if undefined, will generate it's own canvas using createElement.\n     */\n    constructor(text = '', style: TextStyle | Partial<ITextStyle> = {}, canvas?: HTMLCanvasElement)\n    {\n        canvas = canvas || document.createElement('canvas');\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas, { scaleMode: settings.SCALE_MODE });\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        const ns = 'http://www.w3.org/2000/svg';\n        const svgRoot = document.createElementNS(ns, 'svg');\n        const foreignObject = document.createElementNS(ns, 'foreignObject');\n        const domElement = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n\n        foreignObject.setAttribute('height', '100%');\n        foreignObject.setAttribute('width', '100%');\n        svgRoot.appendChild(foreignObject);\n\n        this._domElement = domElement;\n        this._svgRoot = svgRoot;\n        this._foreignObject = foreignObject;\n        this._image = new Image();\n\n        this.canvas = canvas;\n        this.context = canvas.getContext('2d') as CanvasRenderingContext2D;\n        this._resolution = settings.RESOLUTION;\n        this.text = text;\n        this.style = style;\n    }\n\n    /**\n     * Manually refresh the text.\n     * @public\n     * @param {boolean} respectDirty - Whether to abort updating the\n     *        text if the Text isn't dirty and the function is called.\n     */\n    updateText(respectDirty = true): void\n    {\n        const { style, resolution } = this;\n\n        const canvas = this.canvas as HTMLCanvasElement;\n        const context = this.context as CanvasRenderingContext2D;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        let css = `\n            display:inline-block;\n            color:${style.fill};\n            font-size: ${style.fontSize}px;\n            font-family:${style.fontFamily};\n            font-weight:${style.fontWeight};\n            font-style:${style.fontStyle};\n            font-variant:${style.fontVariant};\n            letter-spacing:${style.letterSpacing}px;\n            text-align:${style.align};\n            padding:${style.padding}px;\n        `;\n\n        if (style.lineHeight)\n        {\n            css += `line-height:${style.lineHeight}px;`;\n        }\n\n        if (style.wordWrap)\n        {\n            css += `word-wrap:${style.breakWords ? 'break-all' : 'break-word'};`;\n            css += `width:${style.wordWrapWidth}px;`;\n        }\n\n        if (style.strokeThickness)\n        {\n            let { stroke } = style;\n\n            if (typeof stroke === 'number')\n            {\n                stroke = utils.hex2string(stroke);\n            }\n\n            css += `-webkit-text-stroke-width: ${style.strokeThickness}px;`;\n            css += `-webkit-text-stroke-color: ${stroke};`;\n            css += `text-stroke-width: ${style.strokeThickness}px;`;\n            css += `text-stroke-color: ${stroke};`;\n            css += 'paint-order: stroke;';\n        }\n\n        if (style.dropShadow)\n        {\n            const { dropShadowAngle, dropShadowDistance, dropShadowBlur, dropShadowColor, dropShadowAlpha } = style;\n            const x = Math.round(Math.cos(dropShadowAngle) * dropShadowDistance);\n            const y = Math.round(Math.sin(dropShadowAngle) * dropShadowDistance);\n            let color = dropShadowColor;\n\n            // Convert numbers to hex strings\n            if (typeof color === 'number')\n            {\n                color = utils.hex2string(color);\n            }\n\n            // Check if we should apply alpha\n            if (color.charAt(0) === '#' && dropShadowAlpha < 1)\n            {\n                const [r, g, b] = utils.hex2rgb(parseInt(color.replace('#', ''), 16));\n\n                color = `rgba(${r * 255 | 0}, ${g * 255 | 0}, ${b * 255 | 0}, ${dropShadowAlpha})`;\n            }\n\n            css += `text-shadow: ${x}px ${y}px ${dropShadowBlur}px ${color};`;\n        }\n\n        const dom = this._domElement;\n\n        Object.assign(dom, {\n            innerHTML: this._text,\n            style: css,\n        });\n\n        // Measure the contents\n        document.body.appendChild(dom);\n        const { width, height } = dom.getBoundingClientRect();\n\n        document.body.removeChild(dom);\n\n        // Assemble the svg output\n        this._foreignObject.appendChild(dom);\n        this._svgRoot.setAttribute('width', width.toString());\n        this._svgRoot.setAttribute('height', height.toString());\n\n        canvas.width = Math.ceil((Math.max(1, width) + (style.padding * 2)) * resolution);\n        canvas.height = Math.ceil((Math.max(1, height) + (style.padding * 2)) * resolution);\n\n        if (!this._loading)\n        {\n            const image = this._image;\n            const svgURL = new XMLSerializer().serializeToString(this._svgRoot);\n\n            this._loading = true;\n            image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(svgURL)}`;\n            image.onload = () =>\n            {\n                context.scale(resolution, resolution);\n                context.clearRect(0, 0, canvas.width, canvas.height);\n                context.drawImage(\n                    image,\n                    0, 0, width, height,\n                    0, 0, width, height,\n                );\n                image.src = '';\n                image.onload = null;\n                this._loading = false;\n                this.updateTexture();\n            };\n        }\n    }\n\n    /**\n     * Update the texture resource.\n     * @private\n     */\n    updateTexture()\n    {\n        const { style, texture, resolution } = this;\n\n        const canvas = this.canvas as HTMLCanvasElement;\n        const context = this.context as CanvasRenderingContext2D;\n\n        if (style.trim)\n        {\n            const { width, height, data } = utils.trimCanvas(canvas);\n\n            if (data)\n            {\n                canvas.width = width;\n                canvas.height = height;\n                context.putImageData(data, 0, 0);\n            }\n        }\n\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = canvas.width / resolution;\n        texture.trim.height = texture._frame.height = canvas.height / resolution;\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, resolution);\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @param {PIXI.Renderer} renderer - The renderer\n     * @private\n     */\n    _render(renderer: Renderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /**\n     * Renders the object using the Canvas Renderer.\n     *\n     * @private\n     * @param {PIXI.CanvasRenderer} renderer - The renderer\n     */\n    _renderCanvas(renderer: IRenderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        super._renderCanvas(renderer);\n    }\n\n    /**\n     * Get the local bounds.\n     *\n     * @param {PIXI.Rectangle} rect - Input rectangle.\n     * @return {PIXI.Rectangle} Local bounds\n     */\n    getLocalBounds(rect: Rectangle)\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds(rect);\n    }\n\n    _calculateBounds()\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        (this as any)._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Handle dirty style changes\n     * @private\n     */\n    _onStyleChange()\n    {\n        this.dirty = true;\n    }\n\n    /**\n     * Destroy this Text object. Don't use after calling.\n     * @param {boolean|object} options - Same as Sprite destroy options.\n     */\n    destroy(options?: boolean | IDestroyOptions | undefined)\n    {\n        super.destroy(options);\n\n        const forceClear: any = null;\n\n        // make sure to reset the the context and canvas..\n        // dont want this hanging around in memory!\n        this.context = null as any;\n        if (this.canvas)\n        {\n            this.canvas.width = this.canvas.height = 0; // Safari hack\n        }\n        this.canvas = forceClear;\n        this._style = forceClear;\n        this._svgRoot = forceClear;\n        this._domElement = forceClear;\n        this._foreignObject = forceClear;\n        this._image.onload = null;\n        this._image.src = '';\n        this._image = forceClear;\n    }\n\n    /**\n     * Get the width in pixels.\n     * @member {number}\n     */\n    get width()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this.canvas.width / this.resolution;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this.canvas.width / this.resolution;\n        this._width = value;\n    }\n\n    /**\n     * Get the height in pixels.\n     * @member {number}\n     */\n    get height()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this.canvas.height / this.resolution;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this.canvas.height / this.resolution;\n        this._height = value;\n    }\n\n    /**\n     * The base style to render with text.\n     * @member {PIXI.TextStyle}\n     */\n    get style(): TextStyle\n    {\n        return this._style as TextStyle;\n    }\n\n    set style(style: TextStyle | Partial<ITextStyle>) // eslint-disable-line require-jsdoc\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /**\n     * Contents of text. This can be HTML text and include tags.\n     * @example\n     * const text = new HTMLText('This is a <em>styled</em> text!');\n     * @member {string}\n     */\n    get text()\n    {\n        return this._text;\n    }\n\n    set text(text) // eslint-disable-line require-jsdoc\n    {\n        text = String(text === '' || text === null || text === undefined ? ' ' : text);\n        text = this.sanitiseText(text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number) // eslint-disable-line require-jsdoc\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n\n    sanitiseText(text: string): string\n    {\n        // Sanitise text - replace <br> with <br/>, &nbsp; with &#160;\n        // See discussion here:\n        // https://www.sitepoint.com/community/t/xhtml-1-0-transitional-xml-parsing-error-entity-nbsp-not-defined/3392/3\n        return text\n            .replace(/<br>/gi, '<br/>')\n            .replace(/<hr>/gi, '<hr/>')\n            .replace(/&nbsp;/gi, '&#160;');\n    }\n}\n"],"names":["HTMLText","Sprite","text","style","canvas","texture","Texture","settings","Rectangle","ns","svgRoot","foreignObject","domElement","respectDirty","resolution","context","css","stroke","utils","dropShadowAngle","dropShadowDistance","dropShadowBlur","dropShadowColor","dropShadowAlpha","x","y","color","r","g","b","dom","width","height","image","svgURL","data","padding","baseTexture","renderer","rect","options","forceClear","value","s","TextStyle"],"mappings":"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"}